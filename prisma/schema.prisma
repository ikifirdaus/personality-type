generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id                Int     @id @default(autoincrement())
  productName       String
  price             Int
  description       String? @db.Text 
  duration          Int?
  image             String?

  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  cartItem          CartItem[] 
  transactionItem   TransactionItem[]

  @@map("product")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt        DateTime   @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("cartItem")
}

model Transaction {
  id                    Int               @id @default(autoincrement())
  userId                Int
  totalPrice            Int
  status                String            @default("PENDING") // bisa: PENDING, PAID, CANCELLED
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  user                  User              @relation(fields: [userId], references: [id])
  transactionItem       TransactionItem[] // isi detail transaksi
  invoice               Invoice?      


  @@map("transaction")
}

model TransactionItem {
  id             Int          @id @default(autoincrement())
  transactionId  Int
  productId      Int
  quantity       Int          @default(1)
  price          Int          // harga satuan pada saat transaksi

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  transaction    Transaction  @relation(fields: [transactionId], references: [id])
  product        Product      @relation(fields: [productId], references: [id])

  @@map("transactionItem")
}

model Invoice {
  id            Int         @id @default(autoincrement())
  transactionId Int         @unique
  invoiceNumber String      @unique
  createdAt     DateTime    @default(now())

  transaction   Transaction @relation(fields: [transactionId], references: [id])

  @@map("invoice")
}



model Article {
  id               Int        @id @default(autoincrement())
  title            String
  slug             String     @unique
  description      String
  content          String     @db.Text 
  metaTitle        String?
  metaDescription  String?
  metaKeywords     String?
  canonicalUrl     String?
  ogImage          String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  userId           Int?
  user             User?       @relation(fields: [userId], references: [id])

  @@map("article")
}


model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  role        Role     @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  articles    Article[]  // one-to-many: satu user bisa punya banyak artikel
  cartItem    CartItem[] 
  transaction Transaction[]

  @@map("user")
}

enum Role {
  ADMIN
  USER
}

